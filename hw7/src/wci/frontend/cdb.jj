/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. cdb.jj */
/*@egen*/options {
    IGNORE_CASE=true;
                                               
                                                            
               
                 
}

PARSER_BEGIN(CdbParser)
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class CdbParser/*@bgen(jjtree)*/implements CdbParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCdbParserState jjtree = new JJTCdbParserState();

/*@egen*/
    private static final String SOURCE_SUFFIX = ".cdb";
    private static final String OUTPUT_SUFFIX = ".j";

    private static SymTabStack symTabStack;
    private static SymTabEntry programId;

    public static void main(String[] args)
        throws Exception
    {
    	// Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

        // Process the source file path which ends in .cdb
        // and create the output file path which ends in .j
        String sourceFilePath = args[0];
        int truncatedLength = sourceFilePath.length() - SOURCE_SUFFIX.length();
        int suffixIndex = sourceFilePath.lastIndexOf(SOURCE_SUFFIX);
        String objectFilePath = (suffixIndex == truncatedLength)
            ? sourceFilePath.substring(0, truncatedLength) + OUTPUT_SUFFIX
            : sourceFilePath + OUTPUT_SUFFIX;

        // Parse a Cdb program.
        Reader    reader = new FileReader(sourceFilePath);
        CdbParser parser = new CdbParser(reader);
        SimpleNode rootNode = parser.script();

        // Print the cross-reference table.
        CrossReferencer crossReferencer = new CrossReferencer();
        crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
        rootNode.jjtAccept(typeVisitor, null);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);
        
        // Print the parse tree.
        ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        treePrinter.print(symTabStack);
    }
}
PARSER_END(CdbParser)


SKIP: {
    " " | "\r" | "\t" | "\n" | "\r\n"
}

SKIP:
{
  <SINGLE_LINE_COMMENT : "//" (~["\n","\r"])* ("\r" | "\n" | "\r\n") >
}

//skip multi-line comments
MORE : {
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
MORE : {
  < ~[] >
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : {
  <MULTI_LINE_COMMENT: "*/"> : DEFAULT
}

TOKEN: { /* Reserved words */
    <IF        : "IF">
  | <ELSE      : "ELSE">
  | <TRUE      : "TRUE">
  | <FALSE     : "FALSE">
  | <WHILE     : "WHILE">
  | <FOR       : "FOR">
  | <DO        : "DO">
}

TOKEN: /* Special symbols */
{
    <COLON        : ":">
  | <AT           : "@">
  | <EQUALS       : "=">
  | <EE           : "==">
  | <NE           : "!=">
  | <LT           : "<">
  | <LE           : "<=">
  | <GT           : ">">
  | <GE           : ">=">
  | <COMMA        : ",">
  | <DOT          : ".">
  | <SEMICOLON    : ";">
  | <PLUS         : "+">
  | <MINUS        : "-">
  | <STAR         : "*">
  | <SLASH        : "/">
  | <QUOTE        : "'">
  | <DOUBLE_QUOTE : "\"">
  | <LEFT_PAREN   : "(">
  | <RIGHT_PAREN  : ")">
  | <LEFT_BRACE   : "{">
  | <RIGHT_BRACE  : "}">   
  | <AND          : "&&">
  | <OR           : "||">
}

TOKEN: { /* Identifiers, strings, and numbers */
    <IDENTIFIER : <LETTER>(<LETTER>|<DIGIT>)*>
  | <STRING_LIT : <DOUBLE_QUOTE>(~["\""])*<DOUBLE_QUOTE>>

  | <INTEGER    : <UNSIGNED_NUMBER>>
  | <REAL   : <WHOLE><FRACTION><EXPONENT>
             | <WHOLE><FRACTION>
             | <WHOLE><EXPONENT>>

  | <#LETTER : ["a"-"z", "A"-"Z"]>
  | <#DIGIT  : ["0"-"9"]>
  | <#SIGN   : ["+", "-"]>

  | <#UNSIGNED_NUMBER : (<DIGIT>)+>
  | <#WHOLE           : <UNSIGNED_NUMBER>>
  | <#FRACTION        : "." <UNSIGNED_NUMBER>>
  | <#EXPONENT        : "E"(<SIGN>)?<UNSIGNED_NUMBER>>
}

TOKEN: { /*	Error token */
    <EOL     : "\r" | "\n" | "\r\n">
 |  <ERROR   : ~["\r", "\n"]>
}

SimpleNode script() : {/*@bgen(jjtree) script */
                       ASTscript jjtn000 = new ASTscript(JJTSCRIPT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/SimpleNode rootNode;}
{/*@bgen(jjtree) script */
  try {
/*@egen*/
  {
    programId = symTabStack.enterLocal("CDB Program");
    programId.setDefinition(DefinitionImpl.PROGRAM);
    programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
    symTabStack.setProgramId(programId);
  }
  (
    try {
        statement()
      | Error() {handleError(token);}
    }
    catch (ParseException ex) {
      handleError(token);
      System.out.println("Parse Exception");
    }
    catch (NullPointerException ex) {	  handleError(token);
      System.out.println("Undefined Variable");
    }
  )+
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void statement()       : {}
{
  (
       assignmentStatement()
    |  declarationStatement()
    |  ifStatement()
    |  doLoop()
    |  forLoop()
    |  whileLoop()
  )
}

SimpleNode compoundStatement() : {/*@bgen(jjtree) compoundStatement */
  ASTcompoundStatement jjtn000 = new ASTcompoundStatement(JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) compoundStatement */
    try {
/*@egen*/
    <LEFT_BRACE>
    (statement())+
    <RIGHT_BRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void whileLoop() : {/*@bgen(jjtree) whileLoop */
  ASTwhileLoop jjtn000 = new ASTwhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) whileLoop */
  try {
/*@egen*/
  <WHILE> <LEFT_PAREN> expression() <RIGHT_PAREN>
  (
	  compoundStatement() 
	| statement()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void forLoop() : {/*@bgen(jjtree) forLoop */
  ASTforLoop jjtn000 = new ASTforLoop(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) forLoop */
  try {
/*@egen*/
  <FOR>
  <LEFT_PAREN>
  (assignment())?
  <SEMICOLON>
  (expression())?
  <SEMICOLON>
  (assignment())?
  <RIGHT_PAREN>
  (
	  compoundStatement()
	| statement()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void doLoop() : {/*@bgen(jjtree) doLoop */
  ASTdoLoop jjtn000 = new ASTdoLoop(JJTDOLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) doLoop */
        try {
/*@egen*/
	<DO>
	(
	  compoundStatement()
	| statement()
    )
    <WHILE> <LEFT_PAREN> expression() <RIGHT_PAREN> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ifStatement() : {/*@bgen(jjtree) ifStatement */
  ASTifStatement jjtn000 = new ASTifStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ifStatement */
        try {
/*@egen*/
	<IF> <LEFT_PAREN> expression() <RIGHT_PAREN>
	(
	  compoundStatement()
	| statement()
    )
    ( LOOKAHEAD(1) <ELSE> (
		  compoundStatement()
		| statement()
    ))?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void declarationStatement()       : {ArrayList<SymTabEntry> variableList;
	                                 int index = 0;}
{	<AT> <IDENTIFIER> {
			SymTabEntry typeId = symTabStack.lookup(token.image);
            typeId.appendLineNumber(token.beginLine);
            TypeSpec type = typeId.getTypeSpec();
	  
        }
        <IDENTIFIER> {
            variableList = new ArrayList<SymTabEntry>();
            processVariableDecl(token, index++, variableList);
        }
        (
            <COMMA>
            <IDENTIFIER> {
                processVariableDecl(token, index++, variableList);
            }
        )*
        {
       		for (SymTabEntry variableId : variableList) {
           		variableId.setTypeSpec(type);
            }
        }
    <SEMICOLON>
}

void assignmentStatement()       : {}
{
    assignment()
    <SEMICOLON>
}

void assignment() : {/*@bgen(jjtree) assignment */
  ASTassignment jjtn000 = new ASTassignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignment */
        try {
/*@egen*/	variable() {
        SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
    }
    <EQUALS>
    expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void expression()       : {}
{
  simpleExpression() (
		<EE>/*@bgen(jjtree) #EE( 2) */
                     {
                       ASTEE jjtn001 = new ASTEE(JJTEE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/       
      | <NE>/*@bgen(jjtree) #NE( 2) */
             {
               ASTNE jjtn002 = new ASTNE(JJTNE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
             }
             try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
               }
             }
/*@egen*/       
      | <LT>/*@bgen(jjtree) #LT( 2) */
             {
               ASTLT jjtn003 = new ASTLT(JJTLT);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
             }
             try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 throw (RuntimeException)jjte003;
               }
               if (jjte003 instanceof ParseException) {
                 throw (ParseException)jjte003;
               }
               throw (Error)jjte003;
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
             }
/*@egen*/       
      | <LE>/*@bgen(jjtree) #LE( 2) */
             {
               ASTLE jjtn004 = new ASTLE(JJTLE);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
             }
             try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 throw (RuntimeException)jjte004;
               }
               if (jjte004 instanceof ParseException) {
                 throw (ParseException)jjte004;
               }
               throw (Error)jjte004;
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004,  2);
               }
             }
/*@egen*/       
      | <GT>/*@bgen(jjtree) #GT( 2) */
             {
               ASTGT jjtn005 = new ASTGT(JJTGT);
               boolean jjtc005 = true;
               jjtree.openNodeScope(jjtn005);
             }
             try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte005) {
               if (jjtc005) {
                 jjtree.clearNodeScope(jjtn005);
                 jjtc005 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte005 instanceof RuntimeException) {
                 throw (RuntimeException)jjte005;
               }
               if (jjte005 instanceof ParseException) {
                 throw (ParseException)jjte005;
               }
               throw (Error)jjte005;
             } finally {
               if (jjtc005) {
                 jjtree.closeNodeScope(jjtn005,  2);
               }
             }
/*@egen*/       
      | <GE>/*@bgen(jjtree) #GE( 2) */
             {
               ASTGE jjtn006 = new ASTGE(JJTGE);
               boolean jjtc006 = true;
               jjtree.openNodeScope(jjtn006);
             }
             try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte006) {
               if (jjtc006) {
                 jjtree.clearNodeScope(jjtn006);
                 jjtc006 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte006 instanceof RuntimeException) {
                 throw (RuntimeException)jjte006;
               }
               if (jjte006 instanceof ParseException) {
                 throw (ParseException)jjte006;
               }
               throw (Error)jjte006;
             } finally {
               if (jjtc006) {
                 jjtree.closeNodeScope(jjtn006,  2);
               }
             }
/*@egen*/       
	)?  
}

void simpleExpression()       : {}
{
  term() (
        "+"/*@bgen(jjtree) #add( 2) */
            {
              ASTadd jjtn001 = new ASTadd(JJTADD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ term()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/        
      | "-"/*@bgen(jjtree) #subtract( 2) */
            {
              ASTsubtract jjtn002 = new ASTsubtract(JJTSUBTRACT);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ term()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/             
    )*     
}

void term()       : {}
{
    factor() (
        "*"/*@bgen(jjtree) #multiply( 2) */
            {
              ASTmultiply jjtn001 = new ASTmultiply(JJTMULTIPLY);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ factor()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/             
      | "/"/*@bgen(jjtree) #divide( 2) */
            {
              ASTdivide jjtn002 = new ASTdivide(JJTDIVIDE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ factor()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/           
    )*     
}

void factor()       : {}
{
    variable()
  | integerConstant()
  | realConstant()
}

void variable() : {/*@bgen(jjtree) variable */
  ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variable */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {
        SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
        TypeSpec type = variableId.getTypeSpec();
        jjtn000.setTypeSpec(type);
        jjtn000.setAttribute(ID, variableId);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void integerConstant() : {/*@bgen(jjtree) integerConstant */
  ASTintegerConstant jjtn000 = new ASTintegerConstant(JJTINTEGERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) integerConstant */
    try {
/*@egen*/
    <INTEGER>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
        jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void realConstant() : {/*@bgen(jjtree) realConstant */
  ASTrealConstant jjtn000 = new ASTrealConstant(JJTREALCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) realConstant */
    try {
/*@egen*/
    <REAL>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {
        jjtn000.setTypeSpec(Predefined.realType);
        jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Error()       : {}
{
    <ERROR>
}

JAVACODE
void processVariableDecl(Token token, int index,
                         ArrayList<SymTabEntry> variableList)      
{
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableList.add(variableId);
}

JAVACODE
String handleError(Token token)      
{
    System.out.println("*** ERROR: Line " + token.beginLine +
                     " after \"" + token.image + "\"");

    do {
    	token = getNextToken();
    } while (token.kind != SEMICOLON);

	//jjtree.popNode();
    return token.image;
}
